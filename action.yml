
name: Initialize Test Kubernetes Cluster

inputs:
  cluster-name:
    required: false
    type: string
    default: test
  namespace:
    required: false
    type: string
    default: test
  sa-name:
    required: false
    type: string
    default: test-sa
  redis:
    required: false
    type: boolean
  agones:
    required: false
    type: boolean
  argo-events:
    required: false
    type: boolean
  argo-workflows:
    required: false
    type: boolean
  gcp-credentials:
    required: false
    type: string
  gcs-bucket-name:
    required: false
    type: string
outputs:
  cluster-name:
    description: 'Name of the test cluster'
    value: ${{ steps.cluster.outputs.cluster-name }}
  namespace:
    description: 'Namespace to use for the test cluster'
    value: ${{ steps.cluster.outputs.namespace }}
  sa-name:
    description: 'Service Account name to use for the test cluster'
    value: ${{ steps.cluster.outputs.sa-name }}
  gcp-credentials-file:
    description: 'Path to the Google Cloud credentials file'
    value: ${{ steps.gcloud.outputs.gcp-credentials-file }}

runs:
  using: composite
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install k3d
      shell: bash
      run: |
        curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash

    - name: Install Helm
      shell: bash
      run: |
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        chmod 700 get_helm.sh
        ./get_helm.sh

    - id: gcloud
      name: Setup Google Cloud SDK
      if: ${{ inputs.gcp-credentials != '' }}
      shell: bash
      run: |
        echo "${GOOGLE_JSON_KEY_CONTENTS}" > ${GOOGLE_JSON_KEY_PATH}
        gcloud auth activate-service-account --key-file=${GOOGLE_JSON_KEY_PATH}
        echo "gcp-credentials-file=${GOOGLE_JSON_KEY_PATH}" >> $GITHUB_OUTPUT
      env:
        GOOGLE_JSON_KEY_PATH: '/home/runner/google-key.json'
        GOOGLE_JSON_KEY_CONTENTS: ${{ inputs.gcp-credentials }}

    - id: cluster
      name: Init Test Cluster
      shell: bash
      run: |
        k3d cluster create ${CLUSTER_NAME}
        kubectl wait --for=condition=ready node --all --timeout=300s

        kubectl create ns ${NAMESPACE}
        kubectl config set-context --current --namespace=${NAMESPACE}

        kubectl create sa ${SA_NAME} -n ${NAMESPACE}
        kubectl create clusterrolebinding test-admin-binding --clusterrole=cluster-admin --serviceaccount=${NAMESPACE}:${SA_NAME}
        kubectl create clusterrolebinding test-deployment-binding --clusterrole=system:controller:deployment-controller --serviceaccount=${NAMESPACE}:${SA_NAME}

        k3d kubeconfig write ${CLUSTER_NAME} > /home/runner/.config/kubeconfig-test-cluster.yaml
        
        echo "cluster-name=${CLUSTER_NAME}" >> $GITHUB_OUTPUT
        echo "namespace=${NAMESPACE}" >> $GITHUB_OUTPUT
        echo "sa-name=${SA_NAME}" >> $GITHUB_OUTPUT
      env:
        CLUSTER_NAME: ${{ inputs.cluster-name }}
        NAMESPACE: ${{ inputs.namespace }}
        SA_NAME: ${{ inputs.sa-name }}

    - name: Install Redis
      if: ${{ inputs.redis == 'true' }}
      shell: bash
      run: |
        helm repo add bitnami https://charts.bitnami.com/bitnami
        helm repo update
        
        helm upgrade -i redis oci://registry-1.docker.io/bitnamicharts/redis \
          --namespace ${NAMESPACE} \
          --create-namespace \
          --set 'auth.enabled'=false \
          --set 'commonConfiguration'='notify-keyspace-events Ex'

    - name: Install Agones
      if: ${{ inputs.agones == 'true' }}
      shell: bash
      run: |
        helm repo add agones https://agones.dev/chart/stable
        helm repo update
        
        helm upgrade --install agones agones/agones \
          --namespace agones-system \
          --create-namespace \
          --set 'gameservers.namespaces[0]'=${NAMESPACE} \
          --set 'agones.featureGates'='PlayerTracking=true'
        
        for crd in gameservers.agones.dev gameserversets.agones.dev fleets.agones.dev fleetautoscalers.autoscaling.agones.dev; do
          kubectl wait --for=condition=established --timeout=300s crd/$crd
        done
        
        kubectl wait --namespace agones-system --for=condition=ready pod --selector=app=agones --timeout=300s
      env:
        NAMESPACE: ${{ inputs.namespace }}

    - name: Install Argo Events
      if: ${{ inputs.argo-events == 'true' }}
      shell: bash
      run: |
        helm repo add argo https://argoproj.github.io/argo-helm
        helm repo update
        
        helm upgrade --install argo-events argo/argo-events \
          --namespace argo-events \
          --create-namespace

    - name: Install Argo Workflows
      if: ${{ inputs.argo-workflows == 'true' }}
      shell: bash
      run: |
        helm repo add argo https://argoproj.github.io/argo-helm
        helm repo update
        
        helm upgrade --install argo-workflows argo/argo-workflows \
          --namespace argo-workflows \
          --create-namespace \
          --version 0.22.15

        if [[ -z "${GOOGLE_JSON_KEY}" ]]; then
          kubectl create secret generic google-credentials --from-literal=credentials=${GOOGLE_JSON_KEY} -n ${NAMESPACE}
        
          if [[ -z "${GCS_BUCKET_NAME}" ]]; then
            kubectl apply -n ${NAMESPACE} -f - <<EOF
            apiVersion: v1
            kind: ConfigMap
            metadata:
              name: artifact-repositories
            data:
              gcs-artifact-repository: |
                gcs:
                  bucket: ${GCS_BUCKET_NAME}
                  path: artifacts
                  serviceAccountKeySecret:
                    name: google-credentials
                    key: credentials
            EOF
          fi
        
        fi
      env:
        GOOGLE_JSON_KEY: ${{ inputs.gcp-credentials }}
        GCS_BUCKET_NAME: ${{ inputs.gcs-bucket-name }}
        NAMESPACE: ${{ inputs.namespace }}

